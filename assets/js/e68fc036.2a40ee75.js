"use strict";(self.webpackChunkdjango_deployment=self.webpackChunkdjango_deployment||[]).push([[955],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),d=o,m=p["".concat(l,".").concat(d)]||p[d]||g[d]||i;return t?r.createElement(m,a(a({ref:n},u),{},{components:t})):r.createElement(m,a({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9296:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const i={sidebar_position:1},a="Gunicorn",s={unversionedId:"going-live/gunicorn",id:"going-live/gunicorn",title:"Gunicorn",description:"Gunicorn is a Python Web Server Gateway Interface HTTP server. It is needed to run the server in deployment mode.",source:"@site/docs/going-live/gunicorn.md",sourceDirName:"going-live",slug:"/going-live/gunicorn",permalink:"/django-deployment/docs/going-live/gunicorn",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/going-live/gunicorn.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Going Live",permalink:"/django-deployment/docs/category/going-live"},next:{title:"Reverse Proxy",permalink:"/django-deployment/docs/going-live/reverse-proxy/"}},l={},c=[{value:"Installing Gunicorn",id:"installing-gunicorn",level:2},{value:"Configuring Gunicorn",id:"configuring-gunicorn",level:2},{value:"Gunicorn socket",id:"gunicorn-socket",level:3},{value:"Gunicorn service",id:"gunicorn-service",level:3},{value:"Running Gunicorn",id:"running-gunicorn",level:2},{value:"Testing Gunicorn",id:"testing-gunicorn",level:2},{value:"Reloading Gunicorn",id:"reloading-gunicorn",level:2}],u={toc:c};function g(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"gunicorn"},"Gunicorn"),(0,o.kt)("p",null,"Gunicorn is a Python Web Server Gateway Interface HTTP server. It is needed to run the server in deployment mode. "),(0,o.kt)("h2",{id:"installing-gunicorn"},"Installing Gunicorn"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Activate the virtual environment"),(0,o.kt)("li",{parentName:"ol"},"Run:",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install gunicorn\n")))),(0,o.kt)("h2",{id:"configuring-gunicorn"},"Configuring Gunicorn"),(0,o.kt)("h3",{id:"gunicorn-socket"},"Gunicorn socket"),(0,o.kt)("p",null,"If you are on ssh, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/systemd/system/gunicorn.socket\n")),(0,o.kt)("p",null,"If you have GUI access, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo gedit /etc/systemd/system/gunicorn.socket\n")),(0,o.kt)("p",null,"Edit the below code accordingly and paste it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-unit",metastring:'title="/etc/systemd/system/gunicorn.socket"',title:'"/etc/systemd/system/gunicorn.socket"'},"[Unit]\nDescription=gunicorn socket\n\n[Socket]\nListenStream=0.0.0.0:8080\n\n[Install]\nWantedBy=sockets.target\n")),(0,o.kt)("p",null,"This will run the Gunicorn server on port 8080. If you need to run on other port, make sure to edit it in all the steps."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"It is possible to use unix domain socket (IPC socket) to run gunicorn rather than network port. Replace ",(0,o.kt)("inlineCode",{parentName:"p"},"0.0.0.0:8000")," with a socket address like ",(0,o.kt)("inlineCode",{parentName:"p"},"/run/gunicorn.sock"),".")),(0,o.kt)("h3",{id:"gunicorn-service"},"Gunicorn service"),(0,o.kt)("p",null,"Run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/systemd/system/gunicorn.service\n")),(0,o.kt)("p",null,"Add the below code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-unit",metastring:'title="/etc/systemd/system/gunicorn.service"',title:'"/etc/systemd/system/gunicorn.service"'},"[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target\n\n[Service]\nUser=<user>\nGroup=www-data\nWorkingDirectory=<path_inside_the_project_folder>\nExecStart=<path_inside_the_project_folder>/venv/bin/gunicorn \\\n          --access-logfile gunicorn.log \\\n          --workers <n_workers> \\\n          --bind 0.0.0.0:8080 \\\n         <projectname>.wsgi:application\n\n[Install]\nWantedBy=multi-user.target\n")),(0,o.kt)("p",null,"The above code needs to be modified in the following ways:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},'user - linux username of the user who has necessary permissions to run Django server. "root" gives all privileges and works without raising any permission issues but it is not recommended because of security issues. Create a user with only necessary permissions and use that user here.'),(0,o.kt)("li",{parentName:"ol"},"path_inside_the_project_folder - absolute path inside the projectname folder\nE.g. /home/projectname/"),(0,o.kt)("li",{parentName:"ol"},"n_workers - the number of threads Django can take. The general rule is 2n+1 where n is the number of CPU cores. But may have to reduce n_workers if other services also running on the server.")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Make sure the ",(0,o.kt)("inlineCode",{parentName:"p"},"--bind")," flag's value matches the ListenStream path if you are using unix socket.")),(0,o.kt)("h2",{id:"running-gunicorn"},"Running Gunicorn"),(0,o.kt)("p",null,"Run the following commands to start the Gunicorn server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl start gunicorn.socket\nsudo systemctl enable gunicorn.socket\n\nsudo systemctl start gunicorn\nsudo systemctl enable gunicorn\nsudo systemctl daemon-reload\nsudo systemctl restart gunicorn\n")),(0,o.kt)("h2",{id:"testing-gunicorn"},"Testing Gunicorn"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl status gunicorn\n")),(0,o.kt)("p",null,"Troubleshoot any issues in this. For more detailed information run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo journalctl -u gunicorn\n")),(0,o.kt)("h2",{id:"reloading-gunicorn"},"Reloading Gunicorn"),(0,o.kt)("p",null,"When any changes are made to code or env files run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl restart gunicorn.\n")))}g.isMDXComponent=!0}}]);